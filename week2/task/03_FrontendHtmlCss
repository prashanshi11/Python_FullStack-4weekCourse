## 🧠 **HTML THEORY (Complete Beginner to Advanced)**

---

## 🟢 **1. What is HTML?**

**HTML (HyperText Markup Language)** is the standard language for creating web pages and web applications.

- **HyperText**: Text with links (hyperlinks)
- **Markup Language**: A way to describe the structure of a document

---

## 🟢 **2. Basic Structure of HTML**

```html
<!DOCTYPE html>
<html>
  <head>
    <title>Page Title</title>
  </head>
  <body>
    <h1>Hello World!</h1>
    <p>This is a paragraph.</p>
  </body>
</html>
```

### 🔍 Explanation:

| Tag               | Purpose                         |
| ----------------- | ------------------------------- |
| `<!DOCTYPE html>` | Declares HTML5 version          |
| `<html>`          | Root element                    |
| `<head>`          | Metadata (not visible to users) |
| `<title>`         | Title of the tab                |
| `<body>`          | Visible page content            |

---

## 🟢 **3. Text Tags**

- `<h1>` to `<h6>` → Headings (h1 is largest)
- `<p>` → Paragraph
- `<br>` → Line break
- `<hr>` → Horizontal line

---

## 🟢 **4. Formatting Tags**

| Tag       | Usage       | Example             |
| --------- | ----------- | ------------------- |
| `<b>`     | Bold        | **Text**            |
| `<i>`     | Italic      | _Text_              |
| `<u>`     | Underline   | <u>Text</u>         |
| `<mark>`  | Highlight   | <mark>Text</mark>   |
| `<small>` | Small font  | <small>Text</small> |
| `<del>`   | Deleted     | <del>Text</del>     |
| `<ins>`   | Inserted    | <ins>Text</ins>     |
| `<sub>`   | Subscript   | H<sub>2</sub>O      |
| `<sup>`   | Superscript | x<sup>2</sup>       |

---

## 🟢 **Quotation Tags**

| Tag            | Use Case                                  |
| -------------- | ----------------------------------------- |
| `<blockquote>` | For long quotations (indented block)      |
| `<q>`          | For short inline quotations               |
| `<cite>`       | For citing the source (italic style)      |
| `<abbr>`       | For abbreviations with tooltips           |
| `<address>`    | For contact/address info (italic format)  |
| `<bdo>`        | Bidirectional override for text direction |

---

## 🟢 **5. Lists**

### Unordered List

```html
<ul>
  <li>HTML</li>
  <li>CSS</li>
</ul>
```

### Ordered List

```html
<ol>
  <li>Install Editor</li>
  <li>Write Code</li>
</ol>
```

| List Type   | Tag    | Structure                                    |
| ----------- | ------ | -------------------------------------------- |
| Unordered   | `<ul>` | `<ul><li>Item</li></ul>`                     |
| Ordered     | `<ol>` | `<ol><li>Item</li></ol>`                     |
| Description | `<dl>` | `<dl><dt>Term</dt><dd>Description</dd></dl>` |

| Concept         | Tag Used                 | Purpose                         |
| --------------- | ------------------------ | ------------------------------- |
| Bullet list     | `<ul>`                   | Unordered list                  |
| Numbered list   | `<ol>`                   | Ordered list                    |
| Term/Definition | `<dl>`, `<dt>`, `<dd>`   | Description list                |
| Nesting         | `<ul>` inside `<li>`     | Grouping sublists               |
| Custom style    | `list-style-type` in CSS | Customizing bullet/number style |

---

## 🟢 **6. Links**

```html
<a href="https://google.com" target="_blank">Visit Google</a>
```

- `target="_blank"` opens the link in a new tab.

---

## 🟢 **7. Images**

```html
<img src="image.jpg" alt="Description" width="300" />
```

- `alt` = alternative text if image fails to load.

| Attribute | Description                                                        |
| --------- | ------------------------------------------------------------------ |
| `src`     | (Required) The path to your image file                             |
| `alt`     | (Required) Text to show if image fails to load (for accessibility) |
| `width`   | Sets the image width (px or %)                                     |
| `height`  | Sets the image height (px or %)                                    |
| `title`   | Shows a tooltip when hovered (optional)                            |

| Feature           | Description                         |
| ----------------- | ----------------------------------- |
| `<fieldset>`      | Groups form sections                |
| `<legend>`        | Gives a title to each group         |
| Input `required`  | Ensures fields aren't empty         |
| Input `minlength` | Requires password of minimum length |
| `type="email"`    | Validates email format              |
| `type="tel"`      | For phone numbers                   |
| Stylish buttons   | With hover effect                   |

---

## 🟢 **8. Tables**

```html
<table border="1">
  <tr>
    <th>Name</th>
    <th>Age</th>
  </tr>
  <tr>
    <td>Alice</td>
    <td>25</td>
  </tr>
</table>
```

---

## 🟢 **9. Forms**

## ✅ What is a `<form>` in HTML?

An HTML `<form>` is used to collect **user input**. It can include fields like textboxes, checkboxes, radio buttons, submit buttons, etc., and sends the data to a server or processes it using JavaScript.

---

## 🧩 Basic Structure:

```html
<form action="/submit" method="post">
  <!-- Form elements go here -->
</form>
```

---

## 🧾 Important `<form>` Attributes:

| Attribute      | Description                                                       |
| -------------- | ----------------------------------------------------------------- |
| `action`       | URL to send form data to (can be server script or same page)      |
| `method`       | HTTP method: `GET` (appends data to URL), `POST` (sends securely) |
| `target`       | Where to display the response (e.g., `_blank`, `_self`)           |
| `autocomplete` | `on` or `off` – enables/disables auto-fill                        |
| `novalidate`   | Skips HTML5 validation when submitting                            |

---

## 🧱 Common Input Elements:

### 🔹 1. **Text Input**

```html
<input type="text" name="username" placeholder="Enter username" required />
```

### 🔹 2. **Password**

```html
<input type="password" name="pass" required />
```

### 🔹 3. **Email**

```html
<input type="email" name="email" />
```

### 🔹 4. **Number**

```html
<input type="number" name="age" min="18" max="100" />
```

### 🔹 5. **Date**

```html
<input type="date" name="dob" />
```

### 🔹 6. **Radio Buttons**

```html
<input type="radio" name="gender" value="male" /> Male
<input type="radio" name="gender" value="female" /> Female
```

### 🔹 7. **Checkbox**

```html
<input type="checkbox" name="subscribe" checked /> Subscribe
```

### 🔹 8. **Textarea**

```html
<textarea name="message" rows="4" cols="30">Type your message here...</textarea>
```

### 🔹 9. **Select (Dropdown)**

```html
<select name="country">
  <option value="IN">India</option>
  <option value="US">USA</option>
</select>
```

### 🔹 10. **File Upload**

```html
<input type="file" name="resume" />
```

### 🔹 11. **Submit Button**

```html
<input type="submit" value="Send" />
```

### 🔹 12. **Reset Button**

```html
<input type="reset" value="Clear" />
```

---

## 🧪 Example Form:

```html
<form action="/submit" method="post">
  <label for="name">Name:</label>
  <input type="text" id="name" name="name" required />

  <label for="email">Email:</label>
  <input type="email" id="email" name="email" required />

  <label>Gender:</label>
  <input type="radio" name="gender" value="male" /> Male
  <input type="radio" name="gender" value="female" /> Female

  <label for="country">Country:</label>
  <select id="country" name="country">
    <option value="IN">India</option>
    <option value="US">USA</option>
  </select>

  <input type="submit" value="Submit" />
</form>
```

---

## 🛡️ HTML5 Validation Attributes:

| Attribute     | Purpose                |
| ------------- | ---------------------- |
| `required`    | Field must be filled   |
| `min`, `max`  | For number/date limits |
| `maxlength`   | Max character limit    |
| `pattern`     | Regex pattern          |
| `placeholder` | Hint text              |
| `readonly`    | User can’t modify it   |
| `disabled`    | Field is disabled      |

---

## 🧠 Best Practices:

- Always use `<label>` with inputs for accessibility.
- Use `name` attribute – it's essential for submitting data.
- Use `required`, `type`, and other attributes for form validation.
- Use `fieldset` and `legend` to group related elements.

---

## 📦 Form Layout Example with `fieldset`:

```html
<form>
  <fieldset>
    <legend>Personal Info</legend>
    <input type="text" name="first_name" placeholder="First Name" />
    <input type="text" name="last_name" placeholder="Last Name" />
  </fieldset>
</form>
```

---

## 📤 Form Submission Methods:

### `GET` Method:

- Appends data to URL
- Visible in browser
- Used for search

### `POST` Method:

- Sends data in body
- More secure
- Used for sensitive data

---

---

## 🟢 **10. Input Types**

| Type       | Description            |
| ---------- | ---------------------- |
| `text`     | Single-line text input |
| `password` | Hidden text input      |
| `radio`    | One of many options    |
| `checkbox` | Multiple selections    |
| `submit`   | Button to submit form  |
| `date`     | Date picker            |
| `email`    | Email validation       |
| `file`     | Upload file            |

---

## 🟢 **11. Semantic Tags (HTML5)**

| Tag         | Purpose                |
| ----------- | ---------------------- |
| `<header>`  | Page or section header |
| `<nav>`     | Navigation links       |
| `<main>`    | Main content           |
| `<article>` | Article or blog post   |
| `<section>` | Section of content     |
| `<aside>`   | Sidebar content        |
| `<footer>`  | Footer of the page     |

### ✅ Semantic Tags in HTML

**Semantic HTML** introduces tags that **clearly describe their meaning** in a human- and machine-readable way. Unlike non-semantic tags like `<div>` and `<span>`, semantic tags convey **structure and purpose**.

---

### 🔹 Why Semantic Tags Matter:

| Benefit              | Description                                      |
| -------------------- | ------------------------------------------------ |
| ✅ **Improves SEO**  | Search engines understand your content better    |
| ✅ **Accessibility** | Helps screen readers for visually impaired users |
| ✅ **Readability**   | Easier for developers to read and maintain code  |
| ✅ **Consistency**   | Standard structure across web pages              |

---

### 🔸 Common Semantic Tags:

| Tag            | Purpose                                                          |
| -------------- | ---------------------------------------------------------------- |
| `<header>`     | Represents introductory content (often includes nav, logo, etc.) |
| `<nav>`        | Contains navigation links                                        |
| `<main>`       | The main content of the document (only one per page)             |
| `<section>`    | Defines a section in the document (e.g., chapters, tabs)         |
| `<article>`    | Self-contained content (e.g., blog post, forum post)             |
| `<aside>`      | Side content (e.g., ads, sidebars, related links)                |
| `<footer>`     | Footer for a section or the whole page                           |
| `<figure>`     | Wraps media (images, charts, etc.)                               |
| `<figcaption>` | Caption for a `<figure>`                                         |
| `<mark>`       | Highlights text                                                  |
| `<time>`       | Specifies a time or date                                         |
| `<details>`    | Can be used to create expandable content                         |
| `<summary>`    | Provides a summary for the `<details>` content                   |

---

### 🔍 Example:

```html
<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Semantic HTML Example</title>
  </head>
  <body>
    <header>
      <h1>Prashanshi's Blog</h1>
      <nav>
        <a href="#">Home</a> |
        <a href="#">Projects</a>
      </nav>
    </header>

    <main>
      <article>
        <header><h2>My First Blog Post</h2></header>
        <p>This is the main content of my post.</p>
      </article>

      <aside>
        <h3>Related Posts</h3>
        <ul>
          <li>Post 1</li>
          <li>Post 2</li>
        </ul>
      </aside>
    </main>

    <footer>
      <p>&copy; 2025 Prashanshi Yadav</p>
    </footer>
  </body>
</html>
```

---

### 🎯 Tips to Remember:

- Use **`<main>`** only once per page.
- Use **`<section>`** to group related content.
- Use **`<article>`** when content can stand on its own.
- Avoid overusing **`<div>`** when a semantic tag is more appropriate.

---

## 🟢 **12. Media Tags**

### Image:

```html
<img src="pic.jpg" alt="pic" />
```

### Video:

```html
<video controls width="300">
  <source src="video.mp4" type="video/mp4" />
</video>
```

### Audio:

```html
<audio controls>
  <source src="audio.mp3" type="audio/mpeg" />
</audio>
```

---

## 🟢 **13. HTML Entities**

Used to display reserved characters:

```html
&lt; = < &gt; = > &nbsp; = (non-breaking space) &copy; = ©
```

---

## 🟢 **14. Inline vs Block Elements**

- **Inline**: Doesn’t start on a new line (e.g., `<b>`, `<a>`, `<img>`)
- **Block**: Starts on a new line (e.g., `<div>`, `<p>`, `<h1>`)

---

## 🟢 **15. IFrames (Embed Webpages)**

```html
<iframe src="https://example.com" width="300" height="200"></iframe>
```

---

## 🟢 **16. HTML + CSS + JavaScript (Intro)**

```html
<!DOCTYPE html>
<html>
  <head>
    <style>
      body {
        background-color: #eee;
      }
      h1 {
        color: green;
      }
    </style>
  </head>
  <body>
    <h1>Hello CSS</h1>
    <button onclick="alert('Hello JavaScript!')">Click Me</button>
  </body>
</html>
```

---

## 🟢 **17. Responsive HTML (Meta Viewport)**

```html
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
```

---

## 🟢 **18. Best Practices**

- Use semantic tags (`<main>`, `<article>`)
- Use `alt` with all images
- Validate forms before submission
- Keep code well-indented and clean

---

## 🟢 **19. navbar**

| Part      | Description                            |
| --------- | -------------------------------------- |
| `.navbar` | Container holding all navigation links |
| `<a>`     | Each link in the nav                   |
| `.active` | Style for the current page             |
| `:hover`  | Effect when mouse hovers               |
| `@media`  | Makes nav responsive for mobile        |

## 📘 What is a Navigation Bar?

A **Navigation Bar** (or **Navbar**) is a **menu** that allows users to **navigate between pages or sections** of a website.

It is typically placed at the **top** or **side** of a webpage and contains links like:

- Home
- About
- Services
- Contact, etc.

---

## 🧱 Structure of a Basic Navbar

### 💡 HTML Tags Used:

| Tag            | Description                                                                    |
| -------------- | ------------------------------------------------------------------------------ |
| `<nav>`        | Semantic container for navigation links (optional, more semantic than `<div>`) |
| `<a>`          | Anchor tag — defines hyperlinks to other pages or sections                     |
| `<ul>`, `<li>` | Sometimes used to structure nav links in a list                                |
| `<div>`        | Often used with CSS for styling/layout                                         |
| `class`, `id`  | Attributes used to style elements with CSS                                     |

---

## 🎨 CSS Styling in Navbar

Common styles applied:

| Property                   | Purpose                                  |
| -------------------------- | ---------------------------------------- |
| `background-color`         | Changes navbar background                |
| `color`                    | Text color of links                      |
| `padding`                  | Adds space inside links                  |
| `text-decoration: none`    | Removes underline from links             |
| `:hover`                   | Adds effect when user hovers over a link |
| `float`, `flex`, or `grid` | Aligns links horizontally or vertically  |

---

## 🧑‍💻 Navbar Behavior Types:

| Type                  | Description                                                             |
| --------------------- | ----------------------------------------------------------------------- |
| **Static Navbar**     | Always visible on top of the page                                       |
| **Sticky Navbar**     | Stays at the top even while scrolling                                   |
| **Responsive Navbar** | Adjusts layout for small screens (e.g. collapses into a hamburger menu) |
| **Dropdown Navbar**   | Has menu items that expand/collapse                                     |

---

## 📱 Responsive Navbar

To make navbars work on phones, we use:

- **Media Queries (`@media`)** in CSS
- **JavaScript toggle buttons** (for hamburger menus)

---

## ✅ Why is Navbar Important?

- Provides **easy access** to important parts of the website
- Enhances **user experience** and **site navigation**
- Makes the site feel organized and professional
- Helps **SEO** (Search Engine Optimization) through internal linking

---

## 📌 Example Layout Overview

```html
<div class="navbar">
  <a href="#">Home</a>
  <a href="#">About</a>
  <a href="#">Contact</a>
</div>
```

CSS:

```css
.navbar a {
  text-decoration: none;
  color: white;
  padding: 14px 20px;
  background-color: navy;
}
```

---

## 🧠 Summary:

| Topic          | Key Points                                      |
| -------------- | ----------------------------------------------- |
| Navbar Purpose | Lets users navigate your site                   |
| HTML Tags      | `<nav>`, `<a>`, `<div>`, `<ul>`                 |
| CSS Styles     | `background-color`, `hover`, `float`, `padding` |
| Responsive     | Use `@media` or JS to handle small screens      |

---

## 🧠 HTML `<fieldset>` and `<legend>` — Complete Theory

### ✅ 1. What is `<fieldset>`?

- The `<fieldset>` tag is used to **group related form elements**.
- It creates a **box around the grouped form fields**.
- It improves **form structure**, **readability**, and **accessibility**.

#### 📌 Syntax:

```html
<fieldset>
  <!-- Form fields go here -->
</fieldset>
```

---

### ✅ 2. What is `<legend>`?

- The `<legend>` tag is used **inside a `<fieldset>`** to provide a **caption or title** for the group.
- It usually appears at the **top-left corner** of the fieldset box.

#### 📌 Syntax:

```html
<fieldset>
  <legend>Title for the group</legend>
  <!-- Form elements -->
</fieldset>
```

---

### ✅ 3. Why use `<fieldset>` and `<legend>`?

| Benefit               | Description                                                             |
| --------------------- | ----------------------------------------------------------------------- |
| 🗂️ Organization       | Groups form controls like Name, Email, Password under relevant sections |
| ♿ Accessibility      | Helps screen readers identify the context of form fields                |
| 🎨 Styling            | Allows separate styling for grouped sections                            |
| ✅ Validation clarity | Grouped fields make form validation easier to understand                |

---

### ✅ 4. Example Without Styling

```html
<form>
  <fieldset>
    <legend>Login Info</legend>
    Username: <input type="text" /><br />
    Password: <input type="password" />
  </fieldset>
</form>
```

This will produce a bordered box with the title “Login Info” above it.

---

### ✅ 5. Common CSS Styling for `<fieldset>` and `<legend>`

You can style them using CSS for better appearance:

#### Example:

```css
fieldset {
  background-color: #f9f9f9;
  border: 2px solid #ccc;
  padding: 20px;
}

legend {
  background-color: #007bff;
  color: white;
  padding: 5px 15px;
  border-radius: 5px;
}
```

---

### ✅ 6. Attributes (HTML)

| Tag          | Attribute                  | Description                          |
| ------------ | -------------------------- | ------------------------------------ |
| `<fieldset>` | `disabled`                 | Disables all form elements inside it |
| `<legend>`   | _(no specific attributes)_ | You can use `style` for CSS styling  |

#### Example of `disabled`:

```html
<fieldset disabled>
  <legend>Disabled Section</legend>
  <input type="text" value="Can't edit" />
</fieldset>
```

---

### ✅ 7. Notes

- `<legend>` must be the **first child** of `<fieldset>`.
- Both tags are **optional**, but recommended for better UX.
- You can nest multiple `<fieldset>` sections inside a form.

---

## 🟢 **20. css flexbox**

## ✅ What is Flexbox?

**Flexbox (Flexible Box Layout)** is a CSS module that provides a more efficient way to layout, align, and distribute space among items in a **container**, even when their sizes are unknown or dynamic.

---

## 🎯 Why Use Flexbox?

| Feature            | Benefit                             |
| ------------------ | ----------------------------------- |
| 🔄 One-dimensional | Layout items **in a row or column** |
| 📱 Responsive      | Works great on all screen sizes     |
| 🧭 Alignment       | Easy vertical/horizontal centering  |
| 🚀 Dynamic         | Items grow/shrink automatically     |

---

## 🧱 Basic Structure

```html
<div class="flex-container">
  <div class="item">1</div>
  <div class="item">2</div>
  <div class="item">3</div>
</div>
```

```css
.flex-container {
  display: flex; /* Enables flexbox */
}
```

---

## 🔑 Main Properties

### 🔹 1. `display: flex;`

> Enables Flexbox layout on the container.

```css
.container {
  display: flex;
}
```

---

### 🔹 2. `flex-direction`

> Defines the direction of flex items.

| Value            | Direction     |
| ---------------- | ------------- |
| `row` (default)  | Left to right |
| `row-reverse`    | Right to left |
| `column`         | Top to bottom |
| `column-reverse` | Bottom to top |

```css
.container {
  flex-direction: row; /* or column */
}
```

---

### 🔹 3. `justify-content`

> Aligns items **horizontally**.

| Value           | Description            |
| --------------- | ---------------------- |
| `flex-start`    | Align left/start       |
| `flex-end`      | Align right/end        |
| `center`        | Center horizontally    |
| `space-between` | Equal space between    |
| `space-around`  | Equal space around     |
| `space-evenly`  | Equal space everywhere |

```css
.container {
  justify-content: center;
}
```

---

### 🔹 4. `align-items`

> Aligns items **vertically** in a row.

| Value               | Description               |
| ------------------- | ------------------------- |
| `stretch` (default) | Stretch to fill container |
| `flex-start`        | Top-aligned               |
| `flex-end`          | Bottom-aligned            |
| `center`            | Vertically centered       |
| `baseline`          | Aligned by text baseline  |

```css
.container {
  align-items: center;
}
```

---

### 🔹 5. `flex-wrap`

> Allows items to wrap if needed (default: no wrap).

```css
.container {
  flex-wrap: wrap;
}
```

---

### 🔹 6. `gap`

> Adds spacing between flex items (like margin but cleaner).

```css
.container {
  gap: 20px;
}
```

---

## 🧠 Example: Responsive Flex Layout

```html
<style>
  .container {
    display: flex;
    flex-direction: row;
    justify-content: space-around;
    align-items: center;
    flex-wrap: wrap;
    gap: 20px;
    height: 300px;
    background-color: #eee;
    padding: 20px;
  }

  .item {
    background-color: #4caf50;
    color: white;
    padding: 20px;
    font-size: 20px;
    border-radius: 10px;
    width: 100px;
    text-align: center;
  }
</style>

<div class="container">
  <div class="item">Box 1</div>
  <div class="item">Box 2</div>
  <div class="item">Box 3</div>
  <div class="item">Box 4</div>
</div>
```

---

## 🔧 Extra Item-Level Properties

| Property      | Purpose                                |
| ------------- | -------------------------------------- |
| `flex-grow`   | Defines how much an item should grow   |
| `flex-shrink` | Defines how much an item should shrink |
| `flex-basis`  | Initial size before growing/shrinking  |
| `flex`        | Shorthand for all 3 above              |

```css
.item {
  flex: 1; /* Grow equally */
}
```

---

## 📊 Flexbox Diagram (Simplified)

```
|-----------------------------|
|        Main Axis →         |
|  ↑                         |
|  |  cross axis             |
|  |                         |
|-----------------------------|
```

---

## 📝 Summary Checklist

- ✅ Use `display: flex` to activate Flexbox.
- ✅ Use `flex-direction` to set row/column.
- ✅ Use `justify-content` and `align-items` to align.
- ✅ Use `flex-wrap` for wrapping.
- ✅ Use `gap` for spacing.
- ✅ Use item-level properties for sizing control.

---

## 🟢 **21. css grid**

CSS Grid is a powerful layout system in CSS that allows you to design web layouts in rows and columns. It gives you more control over your web design compared to older layout systems like floats or inline-blocks.

---

### 🔶 **What is CSS Grid?**

**CSS Grid Layout** is a 2-dimensional layout system for the web. It means you can work with both **rows and columns**, unlike flexbox which is mostly one-dimensional (row _or_ column).

---

### 🔧 **Basic Terminology**

| Term               | Meaning                                                  |
| ------------------ | -------------------------------------------------------- |
| **Grid Container** | The parent element where `display: grid` is applied.     |
| **Grid Item**      | The direct children of the grid container.               |
| **Grid Line**      | The lines that divide the grid structure.                |
| **Grid Cell**      | The space between two horizontal and two vertical lines. |
| **Grid Track**     | A row or column in the grid.                             |
| **Grid Area**      | A rectangular space made of one or more grid cells.      |

---

### ✅ **How to Create a Grid Layout**

#### 🧩 Step 1: Define Grid Container

```css
.container {
  display: grid;
}
```

#### 🧩 Step 2: Define Rows & Columns

```css
.container {
  display: grid;
  grid-template-columns: 200px 200px 200px; /* 3 columns */
  grid-template-rows: 100px 100px; /* 2 rows */
}
```

You can also use:

```css
grid-template-columns: repeat(3, 1fr); /* 3 equal columns */
grid-template-rows: auto auto; /* height adjusts automatically */
```

---

### 🧱 **HTML + CSS Example**

```html
<!DOCTYPE html>
<html>
  <head>
    <style>
      .container {
        display: grid;
        grid-template-columns: repeat(3, 1fr); /* 3 equal columns */
        gap: 10px; /* space between items */
        padding: 20px;
        background-color: #ddd;
      }

      .item {
        background-color: #0a0e27;
        color: white;
        text-align: center;
        padding: 20px;
        font-size: 1.2em;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="item">Item 1</div>
      <div class="item">Item 2</div>
      <div class="item">Item 3</div>
      <div class="item">Item 4</div>
      <div class="item">Item 5</div>
      <div class="item">Item 6</div>
    </div>
  </body>
</html>
```

---

### 🔄 **Positioning Grid Items**

```css
.item1 {
  grid-column: 1 / 3; /* spans column 1 and 2 */
  grid-row: 1 / 2; /* only in first row */
}
```

### 🧮 **Units to Use**

- `px`, `em`, `%` – Fixed units
- `fr` – Fraction of remaining space (modern & powerful)

---

### 🧠 **Important Properties**

| Property                           | Description                                 |
| ---------------------------------- | ------------------------------------------- |
| `grid-template-columns`            | Defines the number and width of columns     |
| `grid-template-rows`               | Defines the number and height of rows       |
| `grid-gap` / `gap`                 | Sets the space between rows and columns     |
| `grid-column`, `grid-row`          | Position an item in specific rows/columns   |
| `justify-items`, `align-items`     | Aligns items within their grid cells        |
| `justify-content`, `align-content` | Aligns the entire grid inside the container |

---

### 🎯 **Tips**

- Use `repeat()` to avoid repetitive code.
- Use `fr` to make your layout responsive.
- Combine with media queries for best results.
- CSS Grid works well with Flexbox; use Flexbox for layout _inside_ a grid item.

---

### 📌 Use Case Examples

- Website layouts
- Dashboards
- Image galleries
- Product grids

---

## 🟢 **22. CSS Animation**

## 🎞️ What is CSS Animation?

**CSS Animation** allows you to animate HTML elements **without using JavaScript**. You can make elements **move, fade, grow, shrink, rotate**, and more with smooth transitions.

---

## 🎯 Why Use CSS Animation?

| Benefits        | Description                              |
| --------------- | ---------------------------------------- |
| 🎨 Improve UX   | Makes websites interactive and appealing |
| ⚡ Lightweight  | No need for JavaScript                   |
| 🛠 Easy to use   | Just a few lines of CSS                  |
| ⏱ Custom timing | Control speed, delay, and repetition     |

---

## 🧠 Two Main Ways to Animate in CSS

### 1. **Transitions** – Used for smooth state changes (like hover)

```css
.button {
  transition: background-color 0.3s ease-in-out;
}
```

### 2. **Animations** – Used for more complex, keyframe-based animations

```css
@keyframes slideIn {
  from {
    transform: translateX(-100%);
  }
  to {
    transform: translateX(0);
  }
}

.box {
  animation: slideIn 1s ease-in-out;
}
```

---

## 🔑 Key Concepts of CSS Animation

### 🔹 1. `@keyframes`

- Defines what the animation does in **stages**
- Uses `from` and `to` or `0%` to `100%`

```css
@keyframes bounce {
  0% {
    transform: translateY(0);
  }
  50% {
    transform: translateY(-30px);
  }
  100% {
    transform: translateY(0);
  }
}
```

---

### 🔹 2. Animation Properties

| Property                    | Description                                                              |
| --------------------------- | ------------------------------------------------------------------------ |
| `animation-name`            | Name of the `@keyframes` animation                                       |
| `animation-duration`        | How long the animation lasts (e.g., `2s`, `500ms`)                       |
| `animation-delay`           | Wait before animation starts                                             |
| `animation-iteration-count` | Number of times the animation repeats (`infinite`, `3`, etc.)            |
| `animation-direction`       | Direction: `normal`, `reverse`, `alternate`, `alternate-reverse`         |
| `animation-timing-function` | Speed curve (`ease`, `linear`, `ease-in`, `ease-out`, etc.)              |
| `animation-fill-mode`       | What styles apply before/after (`none`, `forwards`, `backwards`, `both`) |

---

## 🧪 Simple Example of CSS Animation

```html
<!DOCTYPE html>
<html>
  <head>
    <style>
      /* Define animation steps */
      @keyframes fadeSlide {
        0% {
          opacity: 0;
          transform: translateY(-20px);
        }
        100% {
          opacity: 1;
          transform: translateY(0);
        }
      }

      /* Element that will be animated */
      .animated-box {
        width: 200px;
        height: 100px;
        background-color: teal;
        color: white;
        text-align: center;
        line-height: 100px;
        margin: 100px auto;

        /* Apply animation */
        animation-name: fadeSlide;
        animation-duration: 2s;
        animation-timing-function: ease;
        animation-delay: 0s;
        animation-iteration-count: 1;
        animation-fill-mode: forwards;
      }
    </style>
  </head>
  <body>
    <div class="animated-box">Hello Animation</div>
  </body>
</html>
```

---

## ⏰ Timing Functions (Speed Curve Chart)

| Function       | Description                        |
| -------------- | ---------------------------------- |
| `linear`       | Constant speed                     |
| `ease`         | Starts slow, speeds up, slows down |
| `ease-in`      | Starts slow                        |
| `ease-out`     | Ends slow                          |
| `ease-in-out`  | Starts and ends slow               |
| `cubic-bezier` | Custom timing curve (advanced use) |

---

## 📌 Tips to Remember

- Use `animation-fill-mode: forwards;` to keep the end state visible.
- Use `infinite` loop for loading spinners or backgrounds.
- Combine with `:hover` or JavaScript for dynamic effects.
- Keep animations short to avoid irritating users.

---

## 🛠 Common Use Cases

- Loading animations (spinners, loaders)
- Slide-in or fade-in elements
- Button hover effects
- Animating charts and graphs
- Notification popups

| Concept                     | Description                                                                              |
| --------------------------- | ---------------------------------------------------------------------------------------- |
| `@keyframes`                | Defines the animation steps (e.g., move, change color)                                   |
| `animation-name`            | Links an element to a keyframe animation                                                 |
| `animation-duration`        | Time taken to complete one cycle                                                         |
| `animation-timing-function` | Speed curve (`ease`, `linear`, `ease-in`, etc.)                                          |
| `animation-delay`           | Delay before animation starts                                                            |
| `animation-iteration-count` | Number of times the animation plays (`1`, `infinite`, etc.)                              |
| `animation-direction`       | Direction of animation (`normal`, `reverse`, `alternate`)                                |
| `animation-fill-mode`       | Applies styles from start/end when not playing (`none`, `forwards`, `backwards`, `both`) |
| `animation-play-state`      | Controls if the animation is playing or paused                                           |
| `transition`                | Smooth change between property values (usually on hover/focus)                           |

---

## 🟢 **23.Responsive web page**

## 🌐 What is Responsive Web Design (RWD)?

> **Responsive Web Design** is an approach to building web pages that **adjust their layout and content** dynamically based on the **screen size, orientation, and device type**.

This ensures **optimal user experience** on all devices — mobile, tablet, laptop, desktop, and large screens.

---

## 📌 Why Responsive Design Matters?

| Factor                | Responsive Design Benefit        |
| --------------------- | -------------------------------- |
| 📱 Device Flexibility | Works on all screen sizes        |
| 🎯 UX/UI              | Provides better usability        |
| 📈 SEO Ranking        | Google prioritizes RWD sites     |
| 💰 Cost-Efficient     | No need for separate mobile site |
| 🚀 Faster Development | One codebase fits all devices    |

---

## 🧠 Key Concepts of Responsive Design

| Concept                    | Description                                         |
| -------------------------- | --------------------------------------------------- |
| ✅ **Fluid Grid Layouts**  | Uses percentages for width instead of fixed pixels  |
| ✅ **Flexible Images**     | Images scale with screen using `max-width: 100%`    |
| ✅ **Media Queries**       | CSS rules based on device width, orientation, etc.  |
| ✅ **Mobile-First Design** | Design for small screens first, scale up for larger |
| ✅ **Viewport Meta Tag**   | Controls layout on mobile devices                   |

---

## 🖼️ Responsive Layout Graph

```plaintext
| Screen Width (px) | Device Type  | Common Breakpoints |
|-------------------|--------------|---------------------|
| 320 – 480         | Mobile       | 360px, 480px        |
| 481 – 768         | Tablet       | 600px, 768px        |
| 769 – 1024        | Laptop       | 960px, 1024px       |
| 1025 – 1200+      | Desktop/TV   | 1140px, 1200px+     |
```

### 📊 Breakpoint Diagram

```plaintext
Mobile       Tablet         Laptop        Desktop
<480px  ──── 768px ──── 1024px ──── 1200px+
     ↓          ↓           ↓            ↓
+--------+ +------------+ +----------+ +-----------+
| Mobile | |   Tablet   | |  Laptop  | |  Desktop  |
+--------+ +------------+ +----------+ +-----------+
```

---

## 🧾 Core Responsive Techniques

### 1. ✅ Fluid Grids

Instead of:

```css
width: 400px;
```

Use:

```css
width: 80%;
```

### 2. ✅ Flexible Media

```css
img {
  max-width: 100%; /* Image scales with parent */
  height: auto;
}
```

### 3. ✅ Media Queries

```css
/* Small devices (phones) */
@media (max-width: 600px) {
  body {
    background: yellow;
  }
}

/* Medium devices (tablets) */
@media (min-width: 601px) and (max-width: 1024px) {
  body {
    background: orange;
  }
}

/* Large devices (laptops/desktops) */
@media (min-width: 1025px) {
  body {
    background: green;
  }
}
```

### 4. ✅ Viewport Meta Tag

```html
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
```

---

## 📌 Best Practices for RWD

| Practice                                 | Description                           |
| ---------------------------------------- | ------------------------------------- |
| 📏 Use relative units (`%`, `em`, `rem`) | Adapts better to screen size          |
| 🔍 Always define the viewport            | Avoids zooming issues on mobile       |
| 🧱 Use Flexbox & Grid                    | Better control over layouts           |
| 📱 Start with mobile-first CSS           | Add features for bigger screens later |
| 🧪 Test on real devices                  | Simulators can miss real issues       |
| 📸 Use responsive images                 | Use `srcset`, `picture`, or WebP      |

---

## 📈 Responsive vs Adaptive vs Fluid (Chart)

| Feature             | Responsive | Adaptive         | Fluid      |
| ------------------- | ---------- | ---------------- | ---------- |
| Layout Flexibility  | High       | Medium           | High       |
| Uses Media Queries  | ✅ Yes     | ✅ Yes           | ❌ No      |
| Based on % widths   | ✅ Yes     | ❌ No            | ✅ Yes     |
| Screen Breakpoints  | ✅ Dynamic | ✅ Fixed         | ❌ N/A     |
| Codebase Simplicity | One set    | Multiple layouts | One layout |

---

## 📋 Summary Points

- ✅ Design for **all screen sizes**, not just desktop.
- ✅ **Mobile-first** ensures fast, minimal experience.
- ✅ Combine **flexible layouts**, **media queries**, and **scalable images**.
- ✅ Use `CSS Grid` or `Flexbox` for robust layouts.
- ✅ Add `<meta viewport>` tag in `<head>` of HTML.
- ✅ Test on various real devices and browsers.

---

## 🎓 Bonus: Tools to Help with RWD

| Tool Name        | Use Case                     |
| ---------------- | ---------------------------- |
| Chrome DevTools  | Simulate different devices   |
| Bootstrap        | Prebuilt responsive grid     |
| Tailwind CSS     | Utility-first responsive CSS |
| Figma            | Design responsive UI mockups |
| Responsively App | Preview site in all sizes    |

---
