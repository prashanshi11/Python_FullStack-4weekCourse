## 📌 **1. What is JavaScript? (Definition)**

**JavaScript** is a high-level, interpreted **programming language** used to create dynamic and interactive effects within web browsers. It is **client-side**, **object-based**, and **event-driven**.

> ✅ It is one of the core technologies of the **World Wide Web**, alongside HTML and CSS.

---

## 🧠 **2. Why is JavaScript Important?**

| Feature                   | Explanation                                                           |
| ------------------------- | --------------------------------------------------------------------- |
| **Client-Side Execution** | Runs in the browser without server interaction.                       |
| **Interactivity**         | Enables features like sliders, form validation, modal windows, games. |
| **Versatility**           | Works on front-end and back-end (via Node.js).                        |
| **Easy to Learn**         | Beginner-friendly syntax and logic.                                   |
| **Rich Ecosystem**        | Large community, libraries, and frameworks like React, Vue, Angular.  |

---

## 🗂️ **3. JavaScript Core Concepts (Chart)**

| Category             | Topics Covered                                                        |
| -------------------- | --------------------------------------------------------------------- |
| **Basics**           | Variables, Data types, Operators, Comments, Console                   |
| **Control Flow**     | if-else, switch, loops (for, while, do-while)                         |
| **Functions**        | Function declaration, parameters, return, arrow functions             |
| **Objects**          | Object literals, properties, methods                                  |
| **Arrays**           | Creation, looping, common methods (push, pop, map, filter)            |
| **DOM Manipulation** | getElementById, querySelector, event listeners                        |
| **Events**           | onclick, onmouseover, onsubmit, addEventListener                      |
| **ES6 Features**     | let/const, template literals, arrow functions, destructuring, classes |
| **Asynchronous JS**  | setTimeout, setInterval, Promises, async/await                        |
| **Error Handling**   | try-catch, throw                                                      |

---

## 📘 **4. Important Terminologies**

| Term         | Meaning                                                                |
| ------------ | ---------------------------------------------------------------------- |
| **Variable** | Container to store data (declared using `var`, `let`, or `const`)      |
| **Function** | Block of reusable code                                                 |
| **Object**   | Collection of key-value pairs                                          |
| **Array**    | Ordered list of values                                                 |
| **DOM**      | Document Object Model - represents HTML as objects                     |
| **Event**    | User interaction (click, input, etc.) that triggers a function         |
| **Callback** | Function passed as an argument to another function                     |
| **Promise**  | Object representing eventual completion of asynchronous operation      |
| **Scope**    | Determines variable access (global, local, block)                      |
| **Hoisting** | Variable and function declarations are moved to the top during compile |

---

## 📋 **5. Key Points to Remember**

- JavaScript is **case-sensitive**.
- `==` checks value only, while `===` checks **value + type**.
- Use `let` and `const` instead of `var` to avoid scope issues.
- Functions can be stored in variables, passed as arguments, and returned.
- Use **event delegation** to handle events efficiently.
- **Arrow functions** do not have their own `this` context.
- The DOM allows JavaScript to interact with HTML elements.

---

## 🔁 **6. JavaScript Flow Diagram (Simplified)**

```text
HTML Page
   ↓
JavaScript Loaded
   ↓
Parse & Execute (Line-by-line)
   ↓
Access HTML via DOM
   ↓
Event Listeners Wait for User Actions
   ↓
Functions Execute on Events
```

---

## 🎯 **7. Most Common Interview & Viva Questions**

| Question                                                  | Topic                    |
| --------------------------------------------------------- | ------------------------ |
| What is the difference between `var`, `let`, and `const`? | Variables, Scope         |
| What are arrow functions?                                 | ES6, Functions           |
| How is JavaScript different from Java?                    | General                  |
| What is event bubbling and capturing?                     | Events                   |
| What are promises and async/await?                        | Asynchronous Programming |
| Explain closures in JavaScript.                           | Advanced Concepts        |
| What is the DOM, and how does JS interact with it?        | DOM Manipulation         |
| What is the difference between `==` and `===`?            | Comparison Operators     |
| What is hoisting in JavaScript?                           | Execution Context        |
| Explain the concept of scope and closures.                | Scope & Functions        |

---

## ✅ **8. Must-Know JavaScript Functions & Methods**

| Area   | Examples                                     |
| ------ | -------------------------------------------- |
| Array  | `map()`, `filter()`, `reduce()`, `forEach()` |
| String | `slice()`, `substring()`, `toUpperCase()`    |
| Number | `parseInt()`, `toFixed()`                    |
| Date   | `new Date()`, `getDate()`, `getMonth()`      |
| DOM    | `getElementById()`, `querySelector()`        |
| Events | `addEventListener()`, `preventDefault()`     |

---

## 💡 **9. Real-World Uses of JavaScript**

- Form validation before submission
- Animating elements (e.g., sliders, dropdowns)
- Building Single Page Applications (React, Angular)
- Fetching data from APIs using `fetch()` or `axios`
- Game development (Canvas, WebGL)
- Creating browser extensions

---

## 📚 **10. Suggested JavaScript Practice Topics**

- Create a Calculator App
- Form Validation Script
- To-Do List with LocalStorage
- Fetching Weather Data using API
- Simple Quiz App

---

---

## 🧠 **JavaScript Functions – Theory & Concept**

---

### 📘 **Definition**

A **JavaScript function** is a block of reusable code designed to perform a specific task. A function is executed when it is **called/invoked**.

```javascript
function greet(name) {
  return "Hello, " + name;
}
greet("Prashanshi"); // Output: Hello, Prashanshi
```

---

### 📊 **Function Types Chart**

| Function Type            | Description                            | Syntax Example                               |
| ------------------------ | -------------------------------------- | -------------------------------------------- |
| **Named Function**       | Standard function with a name          | `function sayHi() { }`                       |
| **Anonymous Function**   | Function without a name                | `let x = function() { }`                     |
| **Arrow Function**       | Compact syntax using `=>`              | `const sum = (a, b) => a + b;`               |
| **Immediately Invoked**  | Auto-executed after definition         | `(function() { ... })();`                    |
| **Constructor Function** | Creates objects using `new`            | `function Person() { this.name = ""; }`      |
| **Callback Function**    | Passed as argument to another function | `setTimeout(() => alert("Hi"), 1000);`       |
| **Recursive Function**   | Calls itself                           | `function fact(n) { return n * fact(n-1); }` |

---

### 🔑 **Key Concepts and Syntax**

#### ✅ 1. Function Declaration

```javascript
function greet() {
  console.log("Hello!");
}
```

#### ✅ 2. Function Expression

```javascript
const greet = function () {
  console.log("Hi there!");
};
```

#### ✅ 3. Arrow Function (ES6+)

```javascript
const greet = () => {
  console.log("Welcome!");
};
```

#### ✅ 4. Parameters vs Arguments

- **Parameters**: Defined in function definition (`name`)
- **Arguments**: Passed during function call (`"John"`)

```javascript
function greet(name) {} // name = parameter
greet("John"); // "John" = argument
```

#### ✅ 5. Return Statement

```javascript
function add(a, b) {
  return a + b;
}
console.log(add(2, 3)); // 5
```

#### ✅ 6. Default Parameters

```javascript
function greet(name = "Guest") {
  return "Hello " + name;
}
```

---

### 🧠 **Important Concepts**

| Concept                 | Description                                           |
| ----------------------- | ----------------------------------------------------- |
| **Scope**               | Determines variable accessibility (`global`, `local`) |
| **Hoisting**            | Function declarations are hoisted to top              |
| **Closures**            | Functions remember outer variables                    |
| **First-class Citizen** | Functions can be assigned, passed, and returned       |
| **Callback Function**   | Function passed to another function to execute later  |
| **Recursion**           | Function calling itself                               |

---

### 🧮 **Flowchart: Function Execution**

```plaintext
[Start]
   ↓
Define Function
   ↓
Call/Invoke Function
   ↓
Pass Arguments (if any)
   ↓
Execute Code Block
   ↓
Return Result (optional)
   ↓
[End]
```

---

### 📝 **Common Use Cases**

- Reusability of code
- Event handling
- DOM manipulation
- Asynchronous tasks (e.g., fetch API, setTimeout)
- Encapsulation of logic
- Functional programming (callbacks, map/filter/reduce)

---

## ❓ Important Interview/Exam Questions

### 🔹 _Short Answer_

1. What is a function in JavaScript?
2. What is the difference between parameters and arguments?
3. Explain arrow functions and give an example.
4. What are anonymous functions?
5. What is the purpose of the return statement?

### 🔹 _Code-Based Questions_

1. Write a function to calculate the factorial of a number.
2. Create an arrow function to multiply two numbers.
3. Demonstrate how a callback function works.
4. Explain hoisting with an example.
5. Show closure in action using nested functions.

---

### 🧩 **Closure Example**

```javascript
function outer() {
  let count = 0;
  return function inner() {
    count++;
    return count;
  };
}

const counter = outer();
console.log(counter()); // 1
console.log(counter()); // 2
```

---

### 📌 **Key Points Summary**

- Functions = reusable blocks of code
- Support parameters and return values
- Can be declared, expressed, or written as arrow functions
- Closures allow access to outer function variables
- Arrow functions do **not** bind their own `this`
- JavaScript functions are first-class objects

---

---

## 📘 1. **Definition**

An **Event Listener** in JavaScript is a **function that waits for a specific event to occur** on an element (like click, hover, input, etc.), and then executes a specified block of code (the callback).

```js
element.addEventListener("event", functionToRun);
```

---

## 🧠 2. **Concept and Flow**

**Flow of Event Listener:**

1. **User interacts** with the webpage (e.g., clicks a button).
2. **Browser detects** the interaction.
3. **JavaScript listens** to the event using `addEventListener()`.
4. The associated **callback function is triggered**.

---

## 📊 3. **Event Listener Chart**

| Component             | Description                                                        |
| --------------------- | ------------------------------------------------------------------ |
| **Element**           | The HTML element to listen for the event (e.g., `button`, `input`) |
| **Event Type**        | The type of event (`click`, `change`, `mouseover`, etc.)           |
| **Callback Function** | The function that is executed when the event is triggered          |
| **Use**               | Dynamically respond to user input, form actions, animations, etc.  |

---

## 📚 4. **Syntax & Example**

```js
// Syntax
element.addEventListener('event', function);

// Example
document.getElementById("myBtn").addEventListener("click", function() {
  alert("Button clicked!");
});
```

---

## 🧩 5. **Common Event Types**

| Event Type  | Description                    |
| ----------- | ------------------------------ |
| `click`     | User clicks an element         |
| `mouseover` | User hovers over an element    |
| `mouseout`  | User moves out from an element |
| `keydown`   | A key is pressed               |
| `keyup`     | A key is released              |
| `submit`    | A form is submitted            |
| `change`    | Input field value is changed   |
| `load`      | Webpage or image has loaded    |

---

## ⚙️ 6. **Event Listener vs HTML Events**

| Property-Based (Old)         | `addEventListener` (Modern)           |
| ---------------------------- | ------------------------------------- |
| `onclick = function`         | `addEventListener("click", function)` |
| Only 1 handler at a time     | Multiple listeners can be added       |
| Overwrites existing function | All added functions are preserved     |

---

## 🚦 7. **Event Propagation (Flow)**

There are two phases:

- **Capturing Phase (top to target)**
- **Bubbling Phase (target to top)**

### Example:

```js
element.addEventListener("click", myFunction, true); // Capture phase
element.addEventListener("click", myFunction, false); // Bubble phase
```

---

## 🧷 8. **Removing an Event Listener**

```js
function myFunc() {
  alert("Clicked!");
}

btn.addEventListener("click", myFunc);

// To remove:
btn.removeEventListener("click", myFunc);
```

---

## 📌 9. **Key Points**

- `addEventListener` is modern, flexible, and recommended.
- Events follow bubbling (default) or capturing.
- Callback functions can be inline or named.
- Useful for form validation, animations, games, interactions.
- Can add multiple listeners of same type on same element.

---

## ❓ 10. **Important Interview Questions**

### 🔹 Basic Level:

1. What is an event listener in JavaScript?
2. How do you add and remove an event listener?
3. What is the difference between `onclick` and `addEventListener`?

### 🔹 Intermediate Level:

4. Explain event bubbling and event capturing.
5. What does `event.preventDefault()` do?
6. Can we attach multiple event listeners to a single element?

### 🔹 Advanced Level:

7. What is event delegation and how does it work?
8. How does `this` behave inside an event listener?
9. What is the difference between event.target and event.currentTarget?

---

## 🔧 11. **Event Delegation Example**

```js
document.getElementById("list").addEventListener("click", function (e) {
  if (e.target.tagName === "LI") {
    alert("Clicked on item: " + e.target.innerText);
  }
});
```

✔️ Efficient because it uses one listener for many child elements.

---

## 🧮 12. **Memory Optimization Tips**

- Avoid anonymous functions if you plan to remove listeners.
- Use **event delegation** to handle multiple children with one listener.
- Clean up listeners on `unload` or when not needed.

---

---

## 📘 **1. What is the DOM?**

### ✅ **Definition:**

The **DOM (Document Object Model)** is a programming interface provided by browsers that represents the **structure of an HTML or XML document** as a **tree of objects**. It allows JavaScript to **access, modify, add, or remove elements** dynamically.

---

## 🧠 **2. DOM Structure Overview**

### 📊 **DOM Tree Structure Chart:**

```
Document
 └── <html>
      ├── <head>
      │    └── <title>
      └── <body>
           ├── <h1>
           └── <div>
                └── <p>
```

Each HTML element is a **node** in this tree:

- Document node
- Element node
- Text node
- Attribute node
- Comment node

---

## ✍️ **3. Core DOM Manipulation Concepts**

| Concept              | Description                                                      |
| -------------------- | ---------------------------------------------------------------- |
| `document` object    | Entry point to access DOM                                        |
| Selecting elements   | Using `getElementById`, `querySelector`, etc.                    |
| Manipulating content | Changing text, HTML, and attributes                              |
| Manipulating styles  | Changing CSS styles dynamically                                  |
| Creating elements    | Adding new elements with `createElement`, `appendChild`, etc.    |
| Removing elements    | Deleting elements using `remove()` or `removeChild()`            |
| Events & Listeners   | Responding to user actions (`onclick`, `addEventListener`, etc.) |

---

## 🛠️ **4. Element Selection Methods**

| Method                     | Description                           |
| -------------------------- | ------------------------------------- |
| `getElementById(id)`       | Selects a single element by ID        |
| `getElementsByClassName()` | Selects all elements with given class |
| `getElementsByTagName()`   | Selects all elements with given tag   |
| `querySelector()`          | Selects first match (CSS selector)    |
| `querySelectorAll()`       | Selects all matches (NodeList)        |

---

## 🔧 **5. Common DOM Properties and Methods**

| Action           | Code Example                                  |
| ---------------- | --------------------------------------------- |
| Change text      | `element.textContent = "Hello"`               |
| Change HTML      | `element.innerHTML = "<strong>Hi</strong>"`   |
| Change attribute | `element.setAttribute("href", "https://...")` |
| Change style     | `element.style.color = "red"`                 |
| Add class        | `element.classList.add("active")`             |
| Remove class     | `element.classList.remove("hidden")`          |
| Toggle class     | `element.classList.toggle("dark")`            |

---

## ✏️ **6. Creating and Inserting Elements**

```javascript
let newDiv = document.createElement("div"); // create element
newDiv.textContent = "New Box"; // add text
document.body.appendChild(newDiv); // insert into DOM
```

---

## ❌ **7. Removing Elements**

```javascript
let element = document.getElementById("box");
element.remove(); // Removes the element directly
```

---

## 🎯 **8. Event Handling**

| Event Type | Example                              |
| ---------- | ------------------------------------ |
| Click      | `element.onclick = function(){}`     |
| Change     | `element.onchange = function(){}`    |
| Mouseover  | `element.onmouseover = function(){}` |

### ✅ Modern Way:

```javascript
element.addEventListener("click", function () {
  alert("Clicked!");
});
```

---

## 📌 **9. Important Points**

- DOM is **language-independent** but commonly used with JavaScript.
- DOM is **dynamic**; changes are immediately reflected in the page.
- Events in DOM are **bubbling by default**, meaning they move from target up to root unless stopped.
- JavaScript is **client-side**, so DOM changes do not affect server files.

---

## 📝 **10. Important Interview/Exam Questions**

### 🔹 Short Answer:

1. What is the DOM and why is it important in JavaScript?
2. How can you change the content of a webpage using DOM?
3. What is the difference between `innerHTML` and `textContent`?
4. List five DOM selection methods.
5. What does `querySelectorAll()` return?

### 🔹 Code-Based:

6. Write a code to:

   - Change the background color of a `<div>` on button click.
   - Add a new list item to a `<ul>`.
   - Toggle a class on click.

---

## 📚 **11. Mini Chart for Quick Recap**

| Task               | Code Snippet                         |
| ------------------ | ------------------------------------ |
| Select by ID       | `document.getElementById("id")`      |
| Change Text        | `el.textContent = "Text"`            |
| Add Element        | `parent.appendChild(newEl)`          |
| Remove Element     | `el.remove()`                        |
| Handle Click Event | `el.addEventListener("click", func)` |

---

## 🧠 **12. Tip for Learning DOM Easily**

Use browser console (`F12 > Console`) to try:

```javascript
document.body.style.backgroundColor = "lightblue";
```

---

---

## 🔍 1. What is an Object in JavaScript?

An **object** in JavaScript is a **collection of key-value pairs**. It allows you to store multiple related values (properties and methods) under a single name.

> ✅ **Definition:**
> A JavaScript object is a standalone entity, with properties and type. It is similar to real-life objects like a car (which has properties like color and methods like drive()).

---

## 📌 2. Why Use Objects?

- To represent real-world entities
- To group data and behavior together
- To enable dynamic property access
- To support object-oriented programming

---

## 🧠 3. Object Basics

### 🔧 Syntax:

```javascript
let person = {
  name: "Alice",
  age: 25,
  greet: function () {
    console.log("Hello!");
  },
};
```

### ➕ Accessing Properties:

```javascript
console.log(person.name); // Dot notation
console.log(person["age"]); // Bracket notation
```

### ✏️ Modifying:

```javascript
person.age = 26;
```

### ➕ Adding:

```javascript
person.city = "Delhi";
```

### ❌ Deleting:

```javascript
delete person.city;
```

---

## 🧱 4. Object Components

| Part         | Description                                          | Example                |
| ------------ | ---------------------------------------------------- | ---------------------- |
| **Key**      | Name of the property (always a string)               | `"name"`               |
| **Value**    | Any JS data (string, number, object, function, etc.) | `"Alice"` or `25`      |
| **Method**   | Function defined inside an object                    | `greet: function() {}` |
| **Property** | Key + value pair                                     | `name: "Alice"`        |

---

## 🗂️ 5. Object Types (Ways to Create)

### 1. **Object Literal** ✅

```javascript
let car = { brand: "Toyota", year: 2020 };
```

### 2. **Constructor Function**

```javascript
function Person(name, age) {
  this.name = name;
  this.age = age;
}
let p1 = new Person("John", 30);
```

### 3. **Class Syntax (ES6)**

```javascript
class Animal {
  constructor(type) {
    this.type = type;
  }
}
let dog = new Animal("Dog");
```

### 4. **Object.create()**

```javascript
let parent = { species: "human" };
let child = Object.create(parent);
child.name = "Jane";
```

---

## 🔄 6. Looping Through Objects

### `for...in` loop:

```javascript
for (let key in person) {
  console.log(key, person[key]);
}
```

---

## 🧪 7. Methods in Objects

Objects can have **functions as methods**:

```javascript
let user = {
  name: "Mark",
  greet() {
    console.log("Hi, I'm " + this.name);
  },
};
user.greet(); // Hi, I'm Mark
```

---

## 🌳 8. JavaScript Object Diagram

```
person = {
  name: "Alice",       // property
  age: 25,             // property
  greet: function() {  // method
    console.log("Hello");
  }
}
```

```
        +--------------------+
        |      Object        |
        +--------------------+
        | name: "Alice"      |
        | age: 25            |
        | greet: function()  |
        +--------------------+
```

---

## 📊 9. Chart: Object vs Array vs Class

| Feature          | Object               | Array                   | Class                  |
| ---------------- | -------------------- | ----------------------- | ---------------------- |
| Key type         | String (or symbol)   | Numeric indices (0,1,2) | Class members          |
| Use case         | Group related values | Ordered list of items   | Blueprints for objects |
| Methods included | Yes                  | Yes (array methods)     | Yes                    |

---

## 📌 10. Special Object Features

- **Nested Objects**:

```javascript
let student = {
  name: "Riya",
  marks: {
    math: 90,
    science: 85,
  },
};
```

- **this Keyword**: Refers to the current object
- **JSON**: JavaScript Object Notation (used for storing & transferring data)
- **Prototypes**: Allow inheritance of properties/methods

---

## ✅ 11. Real-World Example

```javascript
let bankAccount = {
  accountNumber: "123456",
  balance: 5000,
  deposit(amount) {
    this.balance += amount;
    console.log("Deposited:", amount);
  },
  getBalance() {
    return this.balance;
  },
};
bankAccount.deposit(1000);
console.log(bankAccount.getBalance()); // 6000
```

---

## 🧠 12. Summary Points

- Objects hold key-value pairs
- Properties can be any type
- Can contain methods (functions)
- Support inheritance via prototypes
- Are the foundation of OOP in JavaScript

---

---

## 📘 **What is an Array in JavaScript?**

An **Array** is a **data structure** used to **store multiple values in a single variable**. It's an **ordered collection** of items, where each item has an **index** starting from `0`.

```javascript
let fruits = ["Apple", "Banana", "Mango"];
```

---

## 📚 **Why Use Arrays?**

- To **store related data** (e.g., list of names, scores, products).
- To perform **iteration** over items.
- To perform **bulk operations** like filtering, sorting, mapping.

---

## 🧠 **Array Concepts and Theory**

### ✅ 1. **Array Declaration**

```javascript
let arr = []; // Empty array
let numbers = [1, 2, 3]; // Array of numbers
let mixed = [1, "hello", true]; // Mixed types
```

### ✅ 2. **Accessing Elements**

```javascript
let colors = ["Red", "Green", "Blue"];
console.log(colors[0]); // "Red"
console.log(colors[2]); // "Blue"
```

### ✅ 3. **Modifying Elements**

```javascript
colors[1] = "Yellow"; // Changes "Green" to "Yellow"
```

### ✅ 4. **Array Length**

```javascript
console.log(colors.length); // 3
```

### ✅ 5. **Adding and Removing Elements**

```javascript
// Add
arr.push("New"); // Add to end
arr.unshift("First"); // Add to beginning

// Remove
arr.pop(); // Remove last
arr.shift(); // Remove first
```

---

## 🧾 **Array Methods (with chart)**

| Method       | Description                 | Example                      |
| ------------ | --------------------------- | ---------------------------- |
| `push()`     | Adds to end                 | `arr.push(10)`               |
| `pop()`      | Removes from end            | `arr.pop()`                  |
| `shift()`    | Removes from start          | `arr.shift()`                |
| `unshift()`  | Adds to start               | `arr.unshift(5)`             |
| `slice()`    | Returns a portion           | `arr.slice(1, 3)`            |
| `splice()`   | Adds/removes items anywhere | `arr.splice(1, 2, "a", "b")` |
| `forEach()`  | Runs function on each item  | `arr.forEach(fn)`            |
| `map()`      | Transforms each item        | `arr.map(x => x * 2)`        |
| `filter()`   | Filters items               | `arr.filter(x => x > 10)`    |
| `reduce()`   | Reduces to single value     | `arr.reduce((a,b) => a + b)` |
| `indexOf()`  | Finds index of item         | `arr.indexOf("item")`        |
| `includes()` | Checks if value exists      | `arr.includes("item")`       |
| `sort()`     | Sorts array                 | `arr.sort()`                 |
| `reverse()`  | Reverses array              | `arr.reverse()`              |

---

## 🧮 **Looping Through Arrays**

### `for` loop

```javascript
for (let i = 0; i < arr.length; i++) {
  console.log(arr[i]);
}
```

### `forEach()`

```javascript
arr.forEach(function (item) {
  console.log(item);
});
```

### `for...of`

```javascript
for (let item of arr) {
  console.log(item);
}
```

---

## 📊 **Visual Representation (Chart)**

```
let cars = ["BMW", "Audi", "Tata"];
              ↓      ↓       ↓
Index:        0      1       2
```

---

## 📝 **Key Points**

- Arrays in JavaScript can store **mixed data types**.
- JavaScript arrays are **dynamic** (they grow/shrink).
- Arrays are **zero-indexed** (start from 0).
- Arrays are **mutable** (can be changed after creation).
- Common use cases: **loops**, **sorting**, **searching**, **filtering**.

---

## 🚀 **Advanced Topics (Short Overview)**

### Multidimensional Arrays:

```javascript
let matrix = [
  [1, 2],
  [3, 4],
];
console.log(matrix[1][1]); // 4
```

### Array Destructuring:

```javascript
let [a, b] = [10, 20];
console.log(a); // 10
```

### Spread Operator:

```javascript
let newArr = [...arr1, ...arr2];
```

---
