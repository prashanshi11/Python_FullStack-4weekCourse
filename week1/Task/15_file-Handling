## ✅ 1. **Definition**

**File Handling** in Python allows you to create, read, write, and delete files. It provides built-in functions and methods to perform these operations securely and efficiently.

---

## ✅ 2. **Key Concepts**

| Operation       | Mode               | Description                                                         |
| --------------- | ------------------ | ------------------------------------------------------------------- |
| **Read**        | `'r'`              | Opens a file for reading (default). Error if file doesn’t exist.    |
| **Write**       | `'w'`              | Opens a file for writing. Creates a new file or truncates existing. |
| **Append**      | `'a'`              | Opens a file for appending. Creates new if not exists.              |
| **Read+Write**  | `'r+'`             | Read and write (doesn’t truncate).                                  |
| **Write+Read**  | `'w+'`             | Write and read (truncates).                                         |
| **Append+Read** | `'a+'`             | Append and read. File pointer at the end.                           |
| **Binary**      | `'rb', 'wb', 'ab'` | Used for binary files like images, videos.                          |

---

## ✅ 3. **File Methods**

| Method             | Description                                  |
| ------------------ | -------------------------------------------- |
| `open()`           | Opens a file, returns file object            |
| `read(size)`       | Reads `size` bytes (or all if not specified) |
| `readline()`       | Reads one line                               |
| `readlines()`      | Reads all lines into a list                  |
| `write(str)`       | Writes string to file                        |
| `writelines(list)` | Writes list of strings                       |
| `seek(offset)`     | Moves cursor to a given offset               |
| `tell()`           | Returns current position of cursor           |
| `close()`          | Closes the file                              |

---

## ✅ 4. **Flowchart: File Handling Process**

```text
START
  ↓
OPEN FILE (with mode)
  ↓
PERFORM OPERATIONS (read/write/etc.)
  ↓
CLOSE FILE
  ↓
END
```

---

## ✅ 5. **Tips to Remember**

- Always close the file using `.close()` or use `with open()` block.
- Use `with open()` for automatic handling of resources.
- Text files use default mode `'r'`; binary files need `'b'`.
- File cursor moves as data is read or written; use `seek()` to reset.

---

## ✅ 6. **Basic Examples**

```python
# Write to a file
with open("demo.txt", "w") as file:
    file.write("Hello World!")

# Read from a file
with open("demo.txt", "r") as file:
    print(file.read())

# Append to a file
with open("demo.txt", "a") as file:
    file.write("\nNew Line Added")
```

---

## ✅ 7. **Logic Behind File Handling**

- Python file handling operates on the OS-level file system.
- `open()` creates a file stream and a file object.
- File modes (`'r'`, `'w'`, etc.) tell the interpreter how to handle the file.
- Buffering helps improve performance, especially in large files.
- Errors like `FileNotFoundError` and `PermissionError` need exception handling.

---

## ✅ 8. **Points to be Known (Quick Revision)**

- `with open()` is preferred for resource management.
- Writing clears the file unless `'a'` or `'r+'` is used.
- Reading large files line-by-line is memory-efficient (`readline()` or loop).
- Use `os` or `pathlib` modules to check file existence.

---

## ✅ 9. **Interview Questions (With Answers)**

**Q1:** What is the difference between `w` and `a` mode?
**A:** `w` overwrites the file; `a` appends to the end of the file.

**Q2:** What happens if you try to read a file that doesn't exist?
**A:** `FileNotFoundError` is raised.

**Q3:** How do you ensure a file is closed after use?
**A:** Use a `with open()` block.

**Q4:** How do you read large files efficiently?
**A:** Use a `for line in file:` loop instead of `read()`.

**Q5:** What is the purpose of `seek()` and `tell()`?
**A:** `seek()` moves the cursor; `tell()` gives current cursor position.

---

## ✅ 10. **MCQs**

1. **What does the 'w' mode do?**
   a) Reads a file
   b) Appends to a file
   **c) Writes to a file and truncates**
   d) Reads and writes

2. **Which method reads one line at a time?**
   a) `read()`
   **b) `readline()`**
   c) `readlines()`
   d) `readchar()`

3. **Which keyword is used for context manager in file handling?**
   a) `context`
   b) `manage`
   **c) `with`**
   d) `open`

4. **What will happen if you open a file in 'r' mode and the file doesn't exist?**
   a) File is created
   **b) Error is thrown**
   c) File is emptied
   d) None of the above

5. **What does `seek(0)` do?**
   a) Closes the file
   **b) Moves cursor to start**
   c) Deletes content
   d) Skips first line

---

## ✅ 11. **Graphical Representation (Conceptual)**

```
+----------------+
|  File System   |
+----------------+
        ^
        |
    +--------+     open("file.txt", "r")
    | Python |------------------------>
    | Script |<------------------------ read()
    +--------+     write(), append()
```

---

## ✅ 12. **Advanced Tips**

- Use `try-except` blocks to handle file errors gracefully.
- Use `os.path.exists("file.txt")` to check file existence.
- Use `json` or `pickle` for structured data file handling.
- `seek(0, 2)` moves to end of file; `seek(0)` to start.

---
